/*
 * generated by Xtext 2.24.0
 */
grammar InternalWL;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package bdroussi.nkouadio.tl.tp2.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package bdroussi.nkouadio.tl.tp2.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import bdroussi.nkouadio.tl.tp2.services.WLGrammarAccess;

}
@parser::members {
	private WLGrammarAccess grammarAccess;

	public void setGrammarAccess(WLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleProgram
entryRuleProgram
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getProgramAccess().getFunctionsAssignment()); }
			(rule__Program__FunctionsAssignment)
			{ after(grammarAccess.getProgramAccess().getFunctionsAssignment()); }
		)
		(
			{ before(grammarAccess.getProgramAccess().getFunctionsAssignment()); }
			(rule__Program__FunctionsAssignment)*
			{ after(grammarAccess.getProgramAccess().getFunctionsAssignment()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunction
entryRuleFunction
:
{ before(grammarAccess.getFunctionRule()); }
	 ruleFunction
{ after(grammarAccess.getFunctionRule()); } 
	 EOF 
;

// Rule Function
ruleFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionAccess().getGroup()); }
		(rule__Function__Group__0)
		{ after(grammarAccess.getFunctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDefinition
entryRuleDefinition
:
{ before(grammarAccess.getDefinitionRule()); }
	 ruleDefinition
{ after(grammarAccess.getDefinitionRule()); } 
	 EOF 
;

// Rule Definition
ruleDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDefinitionAccess().getGroup()); }
		(rule__Definition__Group__0)
		{ after(grammarAccess.getDefinitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInput
entryRuleInput
:
{ before(grammarAccess.getInputRule()); }
	 ruleInput
{ after(grammarAccess.getInputRule()); } 
	 EOF 
;

// Rule Input
ruleInput 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInputAccess().getAlternatives()); }
		(rule__Input__Alternatives)
		{ after(grammarAccess.getInputAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOutput
entryRuleOutput
:
{ before(grammarAccess.getOutputRule()); }
	 ruleOutput
{ after(grammarAccess.getOutputRule()); } 
	 EOF 
;

// Rule Output
ruleOutput 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOutputAccess().getAlternatives()); }
		(rule__Output__Alternatives)
		{ after(grammarAccess.getOutputAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCommands
entryRuleCommands
:
{ before(grammarAccess.getCommandsRule()); }
	 ruleCommands
{ after(grammarAccess.getCommandsRule()); } 
	 EOF 
;

// Rule Commands
ruleCommands 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommandsAccess().getGroup()); }
		(rule__Commands__Group__0)
		{ after(grammarAccess.getCommandsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCommand
entryRuleCommand
:
{ before(grammarAccess.getCommandRule()); }
	 ruleCommand
{ after(grammarAccess.getCommandRule()); } 
	 EOF 
;

// Rule Command
ruleCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommandAccess().getAlternatives()); }
		(rule__Command__Alternatives)
		{ after(grammarAccess.getCommandAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCommandIf
entryRuleCommandIf
:
{ before(grammarAccess.getCommandIfRule()); }
	 ruleCommandIf
{ after(grammarAccess.getCommandIfRule()); } 
	 EOF 
;

// Rule CommandIf
ruleCommandIf 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommandIfAccess().getGroup()); }
		(rule__CommandIf__Group__0)
		{ after(grammarAccess.getCommandIfAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCommandFor
entryRuleCommandFor
:
{ before(grammarAccess.getCommandForRule()); }
	 ruleCommandFor
{ after(grammarAccess.getCommandForRule()); } 
	 EOF 
;

// Rule CommandFor
ruleCommandFor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommandForAccess().getAlternatives()); }
		(rule__CommandFor__Alternatives)
		{ after(grammarAccess.getCommandForAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCommandForEach
entryRuleCommandForEach
:
{ before(grammarAccess.getCommandForEachRule()); }
	 ruleCommandForEach
{ after(grammarAccess.getCommandForEachRule()); } 
	 EOF 
;

// Rule CommandForEach
ruleCommandForEach 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommandForEachAccess().getGroup()); }
		(rule__CommandForEach__Group__0)
		{ after(grammarAccess.getCommandForEachAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExprBase
entryRuleExprBase
:
{ before(grammarAccess.getExprBaseRule()); }
	 ruleExprBase
{ after(grammarAccess.getExprBaseRule()); } 
	 EOF 
;

// Rule ExprBase
ruleExprBase 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExprBaseAccess().getAlternatives()); }
		(rule__ExprBase__Alternatives)
		{ after(grammarAccess.getExprBaseAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExprBaseCons
entryRuleExprBaseCons
:
{ before(grammarAccess.getExprBaseConsRule()); }
	 ruleExprBaseCons
{ after(grammarAccess.getExprBaseConsRule()); } 
	 EOF 
;

// Rule ExprBaseCons
ruleExprBaseCons 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExprBaseConsAccess().getAlternatives()); }
		(rule__ExprBaseCons__Alternatives)
		{ after(grammarAccess.getExprBaseConsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExprsBaseHd
entryRuleExprsBaseHd
:
{ before(grammarAccess.getExprsBaseHdRule()); }
	 ruleExprsBaseHd
{ after(grammarAccess.getExprsBaseHdRule()); } 
	 EOF 
;

// Rule ExprsBaseHd
ruleExprsBaseHd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExprsBaseHdAccess().getAlternatives()); }
		(rule__ExprsBaseHd__Alternatives)
		{ after(grammarAccess.getExprsBaseHdAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLExpr
entryRuleLExpr
:
{ before(grammarAccess.getLExprRule()); }
	 ruleLExpr
{ after(grammarAccess.getLExprRule()); } 
	 EOF 
;

// Rule LExpr
ruleLExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLExprAccess().getGroup()); }
		(rule__LExpr__Group__0)?
		{ after(grammarAccess.getLExprAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExprs
entryRuleExprs
:
{ before(grammarAccess.getExprsRule()); }
	 ruleExprs
{ after(grammarAccess.getExprsRule()); } 
	 EOF 
;

// Rule Exprs
ruleExprs 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExprsAccess().getGroup()); }
		(rule__Exprs__Group__0)
		{ after(grammarAccess.getExprsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpresssion
entryRuleExpresssion
:
{ before(grammarAccess.getExpresssionRule()); }
	 ruleExpresssion
{ after(grammarAccess.getExpresssionRule()); } 
	 EOF 
;

// Rule Expresssion
ruleExpresssion 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpresssionAccess().getGroup()); }
		(rule__Expresssion__Group__0)
		{ after(grammarAccess.getExpresssionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVars
entryRuleVars
:
{ before(grammarAccess.getVarsRule()); }
	 ruleVars
{ after(grammarAccess.getVarsRule()); } 
	 EOF 
;

// Rule Vars
ruleVars 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarsAccess().getAlternatives()); }
		(rule__Vars__Alternatives)
		{ after(grammarAccess.getVarsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInputAccess().getGroup_0()); }
		(rule__Input__Group_0__0)
		{ after(grammarAccess.getInputAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getInputAccess().getVariableTerminalRuleCall_1()); }
		RULE_VARIABLE
		{ after(grammarAccess.getInputAccess().getVariableTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOutputAccess().getGroup_0()); }
		(rule__Output__Group_0__0)
		{ after(grammarAccess.getOutputAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getOutputAccess().getVariableTerminalRuleCall_1()); }
		RULE_VARIABLE
		{ after(grammarAccess.getOutputAccess().getVariableTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandAccess().getNopKeyword_0()); }
		'nop'
		{ after(grammarAccess.getCommandAccess().getNopKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getGroup_1()); }
		(rule__Command__Group_1__0)
		{ after(grammarAccess.getCommandAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getCommandIfParserRuleCall_2()); }
		ruleCommandIf
		{ after(grammarAccess.getCommandAccess().getCommandIfParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getCommandForParserRuleCall_3()); }
		ruleCommandFor
		{ after(grammarAccess.getCommandAccess().getCommandForParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getCommandForEachParserRuleCall_4()); }
		ruleCommandForEach
		{ after(grammarAccess.getCommandAccess().getCommandForEachParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandFor__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandForAccess().getGroup_0()); }
		(rule__CommandFor__Group_0__0)
		{ after(grammarAccess.getCommandForAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getCommandForAccess().getGroup_1()); }
		(rule__CommandFor__Group_1__0)
		{ after(grammarAccess.getCommandForAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprBase__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExprBaseAccess().getNilKeyword_0()); }
		'nil'
		{ after(grammarAccess.getExprBaseAccess().getNilKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getExprBaseAccess().getVariableTerminalRuleCall_1()); }
		RULE_VARIABLE
		{ after(grammarAccess.getExprBaseAccess().getVariableTerminalRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getExprBaseAccess().getSymbolTerminalRuleCall_2()); }
		RULE_SYMBOL
		{ after(grammarAccess.getExprBaseAccess().getSymbolTerminalRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getExprBaseAccess().getGroup_3()); }
		(rule__ExprBase__Group_3__0)
		{ after(grammarAccess.getExprBaseAccess().getGroup_3()); }
	)
	|
	(
		{ before(grammarAccess.getExprBaseAccess().getExprBaseConsParserRuleCall_4()); }
		ruleExprBaseCons
		{ after(grammarAccess.getExprBaseAccess().getExprBaseConsParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getExprBaseAccess().getExprsBaseHdParserRuleCall_5()); }
		ruleExprsBaseHd
		{ after(grammarAccess.getExprBaseAccess().getExprsBaseHdParserRuleCall_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprBaseCons__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExprBaseConsAccess().getGroup_0()); }
		(rule__ExprBaseCons__Group_0__0)
		{ after(grammarAccess.getExprBaseConsAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getExprBaseConsAccess().getGroup_1()); }
		(rule__ExprBaseCons__Group_1__0)
		{ after(grammarAccess.getExprBaseConsAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprsBaseHd__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExprsBaseHdAccess().getGroup_0()); }
		(rule__ExprsBaseHd__Group_0__0)
		{ after(grammarAccess.getExprsBaseHdAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getExprsBaseHdAccess().getGroup_1()); }
		(rule__ExprsBaseHd__Group_1__0)
		{ after(grammarAccess.getExprsBaseHdAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vars__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarsAccess().getGroup_0()); }
		(rule__Vars__Group_0__0)
		{ after(grammarAccess.getVarsAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getVarsAccess().getVariableTerminalRuleCall_1()); }
		RULE_VARIABLE
		{ after(grammarAccess.getVarsAccess().getVariableTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__0__Impl
	rule__Function__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getFunctionKeyword_0()); }
	'function'
	{ after(grammarAccess.getFunctionAccess().getFunctionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__1__Impl
	rule__Function__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getSymbolTerminalRuleCall_1()); }
	RULE_SYMBOL
	{ after(grammarAccess.getFunctionAccess().getSymbolTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__2__Impl
	rule__Function__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getFunctionAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getDefinitionParserRuleCall_3()); }
	ruleDefinition
	{ after(grammarAccess.getFunctionAccess().getDefinitionParserRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Definition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group__0__Impl
	rule__Definition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getReadKeyword_0()); }
	'read'
	{ after(grammarAccess.getDefinitionAccess().getReadKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group__1__Impl
	rule__Definition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getInputParserRuleCall_1()); }
	ruleInput
	{ after(grammarAccess.getDefinitionAccess().getInputParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group__2__Impl
	rule__Definition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getPercentSignKeyword_2()); }
	'%'
	{ after(grammarAccess.getDefinitionAccess().getPercentSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group__3__Impl
	rule__Definition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getCommandsParserRuleCall_3()); }
	ruleCommands
	{ after(grammarAccess.getDefinitionAccess().getCommandsParserRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group__4__Impl
	rule__Definition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getPercentSignKeyword_4()); }
	'%'
	{ after(grammarAccess.getDefinitionAccess().getPercentSignKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group__5__Impl
	rule__Definition__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getWriteKeyword_5()); }
	'write'
	{ after(grammarAccess.getDefinitionAccess().getWriteKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getOutputParserRuleCall_6()); }
	ruleOutput
	{ after(grammarAccess.getDefinitionAccess().getOutputParserRuleCall_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Input__Group_0__0__Impl
	rule__Input__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputAccess().getVariableTerminalRuleCall_0_0()); }
	RULE_VARIABLE
	{ after(grammarAccess.getInputAccess().getVariableTerminalRuleCall_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Input__Group_0__1__Impl
	rule__Input__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputAccess().getCommaKeyword_0_1()); }
	','
	{ after(grammarAccess.getInputAccess().getCommaKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Input__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputAccess().getInputParserRuleCall_0_2()); }
	ruleInput
	{ after(grammarAccess.getInputAccess().getInputParserRuleCall_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Output__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Output__Group_0__0__Impl
	rule__Output__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputAccess().getVariableTerminalRuleCall_0_0()); }
	RULE_VARIABLE
	{ after(grammarAccess.getOutputAccess().getVariableTerminalRuleCall_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Output__Group_0__1__Impl
	rule__Output__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputAccess().getCommaKeyword_0_1()); }
	','
	{ after(grammarAccess.getOutputAccess().getCommaKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Output__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputAccess().getOutputParserRuleCall_0_2()); }
	ruleOutput
	{ after(grammarAccess.getOutputAccess().getOutputParserRuleCall_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Commands__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Commands__Group__0__Impl
	rule__Commands__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Commands__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandsAccess().getCommandParserRuleCall_0()); }
	ruleCommand
	{ after(grammarAccess.getCommandsAccess().getCommandParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Commands__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Commands__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Commands__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandsAccess().getGroup_1()); }
	(rule__Commands__Group_1__0)?
	{ after(grammarAccess.getCommandsAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Commands__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Commands__Group_1__0__Impl
	rule__Commands__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Commands__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandsAccess().getSemicolonKeyword_1_0()); }
	';'
	{ after(grammarAccess.getCommandsAccess().getSemicolonKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Commands__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Commands__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Commands__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandsAccess().getCommandsParserRuleCall_1_1()); }
	ruleCommands
	{ after(grammarAccess.getCommandsAccess().getCommandsParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Command__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group_1__0__Impl
	rule__Command__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getVarsParserRuleCall_1_0()); }
	ruleVars
	{ after(grammarAccess.getCommandAccess().getVarsParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group_1__1__Impl
	rule__Command__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getColonEqualsSignKeyword_1_1()); }
	':='
	{ after(grammarAccess.getCommandAccess().getColonEqualsSignKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getExprsParserRuleCall_1_2()); }
	ruleExprs
	{ after(grammarAccess.getCommandAccess().getExprsParserRuleCall_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CommandIf__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommandIf__Group__0__Impl
	rule__CommandIf__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandIf__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandIfAccess().getIfKeyword_0()); }
	'if'
	{ after(grammarAccess.getCommandIfAccess().getIfKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandIf__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommandIf__Group__1__Impl
	rule__CommandIf__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandIf__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandIfAccess().getExpresssionParserRuleCall_1()); }
	ruleExpresssion
	{ after(grammarAccess.getCommandIfAccess().getExpresssionParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandIf__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommandIf__Group__2__Impl
	rule__CommandIf__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandIf__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandIfAccess().getThenKeyword_2()); }
	'then'
	{ after(grammarAccess.getCommandIfAccess().getThenKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandIf__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommandIf__Group__3__Impl
	rule__CommandIf__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandIf__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandIfAccess().getCommandsParserRuleCall_3()); }
	ruleCommands
	{ after(grammarAccess.getCommandIfAccess().getCommandsParserRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandIf__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommandIf__Group__4__Impl
	rule__CommandIf__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandIf__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandIfAccess().getGroup_4()); }
	(rule__CommandIf__Group_4__0)?
	{ after(grammarAccess.getCommandIfAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandIf__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommandIf__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandIf__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandIfAccess().getFiKeyword_5()); }
	'fi'
	{ after(grammarAccess.getCommandIfAccess().getFiKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CommandIf__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommandIf__Group_4__0__Impl
	rule__CommandIf__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandIf__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandIfAccess().getElseKeyword_4_0()); }
	'else'
	{ after(grammarAccess.getCommandIfAccess().getElseKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandIf__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommandIf__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandIf__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandIfAccess().getCommandsParserRuleCall_4_1()); }
	ruleCommands
	{ after(grammarAccess.getCommandIfAccess().getCommandsParserRuleCall_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CommandFor__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommandFor__Group_0__0__Impl
	rule__CommandFor__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandFor__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandForAccess().getWhileKeyword_0_0()); }
	'while'
	{ after(grammarAccess.getCommandForAccess().getWhileKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandFor__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommandFor__Group_0__1__Impl
	rule__CommandFor__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandFor__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandForAccess().getExpresssionParserRuleCall_0_1()); }
	ruleExpresssion
	{ after(grammarAccess.getCommandForAccess().getExpresssionParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandFor__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommandFor__Group_0__2__Impl
	rule__CommandFor__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandFor__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandForAccess().getDoKeyword_0_2()); }
	'do'
	{ after(grammarAccess.getCommandForAccess().getDoKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandFor__Group_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommandFor__Group_0__3__Impl
	rule__CommandFor__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandFor__Group_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandForAccess().getCommandsParserRuleCall_0_3()); }
	ruleCommands
	{ after(grammarAccess.getCommandForAccess().getCommandsParserRuleCall_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandFor__Group_0__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommandFor__Group_0__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandFor__Group_0__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandForAccess().getOdKeyword_0_4()); }
	'od'
	{ after(grammarAccess.getCommandForAccess().getOdKeyword_0_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CommandFor__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommandFor__Group_1__0__Impl
	rule__CommandFor__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandFor__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandForAccess().getForKeyword_1_0()); }
	'for'
	{ after(grammarAccess.getCommandForAccess().getForKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandFor__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommandFor__Group_1__1__Impl
	rule__CommandFor__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandFor__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandForAccess().getExpresssionParserRuleCall_1_1()); }
	ruleExpresssion
	{ after(grammarAccess.getCommandForAccess().getExpresssionParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandFor__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommandFor__Group_1__2__Impl
	rule__CommandFor__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandFor__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandForAccess().getDoKeyword_1_2()); }
	'do'
	{ after(grammarAccess.getCommandForAccess().getDoKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandFor__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommandFor__Group_1__3__Impl
	rule__CommandFor__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandFor__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandForAccess().getCommandsParserRuleCall_1_3()); }
	ruleCommands
	{ after(grammarAccess.getCommandForAccess().getCommandsParserRuleCall_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandFor__Group_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommandFor__Group_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandFor__Group_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandForAccess().getOdKeyword_1_4()); }
	'od'
	{ after(grammarAccess.getCommandForAccess().getOdKeyword_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CommandForEach__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommandForEach__Group__0__Impl
	rule__CommandForEach__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandForEach__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandForEachAccess().getForeachKeyword_0()); }
	'foreach'
	{ after(grammarAccess.getCommandForEachAccess().getForeachKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandForEach__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommandForEach__Group__1__Impl
	rule__CommandForEach__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandForEach__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandForEachAccess().getVariableTerminalRuleCall_1()); }
	RULE_VARIABLE
	{ after(grammarAccess.getCommandForEachAccess().getVariableTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandForEach__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommandForEach__Group__2__Impl
	rule__CommandForEach__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandForEach__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandForEachAccess().getInKeyword_2()); }
	'in'
	{ after(grammarAccess.getCommandForEachAccess().getInKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandForEach__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommandForEach__Group__3__Impl
	rule__CommandForEach__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandForEach__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandForEachAccess().getExpresssionParserRuleCall_3()); }
	ruleExpresssion
	{ after(grammarAccess.getCommandForEachAccess().getExpresssionParserRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandForEach__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommandForEach__Group__4__Impl
	rule__CommandForEach__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandForEach__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandForEachAccess().getDoKeyword_4()); }
	'do'
	{ after(grammarAccess.getCommandForEachAccess().getDoKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandForEach__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommandForEach__Group__5__Impl
	rule__CommandForEach__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandForEach__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandForEachAccess().getCommandsParserRuleCall_5()); }
	ruleCommands
	{ after(grammarAccess.getCommandForEachAccess().getCommandsParserRuleCall_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandForEach__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommandForEach__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandForEach__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandForEachAccess().getOdKeyword_6()); }
	'od'
	{ after(grammarAccess.getCommandForEachAccess().getOdKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExprBase__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprBase__Group_3__0__Impl
	rule__ExprBase__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprBase__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprBaseAccess().getLeftParenthesisKeyword_3_0()); }
	'('
	{ after(grammarAccess.getExprBaseAccess().getLeftParenthesisKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprBase__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprBase__Group_3__1__Impl
	rule__ExprBase__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprBase__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprBaseAccess().getSymbolTerminalRuleCall_3_1()); }
	RULE_SYMBOL
	{ after(grammarAccess.getExprBaseAccess().getSymbolTerminalRuleCall_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprBase__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprBase__Group_3__2__Impl
	rule__ExprBase__Group_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprBase__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprBaseAccess().getLExprParserRuleCall_3_2()); }
	ruleLExpr
	{ after(grammarAccess.getExprBaseAccess().getLExprParserRuleCall_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprBase__Group_3__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprBase__Group_3__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprBase__Group_3__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprBaseAccess().getRightParenthesisKeyword_3_3()); }
	')'
	{ after(grammarAccess.getExprBaseAccess().getRightParenthesisKeyword_3_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExprBaseCons__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprBaseCons__Group_0__0__Impl
	rule__ExprBaseCons__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprBaseCons__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprBaseConsAccess().getLeftParenthesisKeyword_0_0()); }
	'('
	{ after(grammarAccess.getExprBaseConsAccess().getLeftParenthesisKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprBaseCons__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprBaseCons__Group_0__1__Impl
	rule__ExprBaseCons__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprBaseCons__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprBaseConsAccess().getConsKeyword_0_1()); }
	'cons'
	{ after(grammarAccess.getExprBaseConsAccess().getConsKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprBaseCons__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprBaseCons__Group_0__2__Impl
	rule__ExprBaseCons__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprBaseCons__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprBaseConsAccess().getLExprParserRuleCall_0_2()); }
	ruleLExpr
	{ after(grammarAccess.getExprBaseConsAccess().getLExprParserRuleCall_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprBaseCons__Group_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprBaseCons__Group_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprBaseCons__Group_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprBaseConsAccess().getRightParenthesisKeyword_0_3()); }
	')'
	{ after(grammarAccess.getExprBaseConsAccess().getRightParenthesisKeyword_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExprBaseCons__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprBaseCons__Group_1__0__Impl
	rule__ExprBaseCons__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprBaseCons__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprBaseConsAccess().getLeftParenthesisKeyword_1_0()); }
	'('
	{ after(grammarAccess.getExprBaseConsAccess().getLeftParenthesisKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprBaseCons__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprBaseCons__Group_1__1__Impl
	rule__ExprBaseCons__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprBaseCons__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprBaseConsAccess().getListKeyword_1_1()); }
	'list'
	{ after(grammarAccess.getExprBaseConsAccess().getListKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprBaseCons__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprBaseCons__Group_1__2__Impl
	rule__ExprBaseCons__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprBaseCons__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprBaseConsAccess().getLExprParserRuleCall_1_2()); }
	ruleLExpr
	{ after(grammarAccess.getExprBaseConsAccess().getLExprParserRuleCall_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprBaseCons__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprBaseCons__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprBaseCons__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprBaseConsAccess().getRightParenthesisKeyword_1_3()); }
	')'
	{ after(grammarAccess.getExprBaseConsAccess().getRightParenthesisKeyword_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExprsBaseHd__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprsBaseHd__Group_0__0__Impl
	rule__ExprsBaseHd__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprsBaseHd__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprsBaseHdAccess().getLeftParenthesisKeyword_0_0()); }
	'('
	{ after(grammarAccess.getExprsBaseHdAccess().getLeftParenthesisKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprsBaseHd__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprsBaseHd__Group_0__1__Impl
	rule__ExprsBaseHd__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprsBaseHd__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprsBaseHdAccess().getHdKeyword_0_1()); }
	'hd'
	{ after(grammarAccess.getExprsBaseHdAccess().getHdKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprsBaseHd__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprsBaseHd__Group_0__2__Impl
	rule__ExprsBaseHd__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprsBaseHd__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprsBaseHdAccess().getExprBaseParserRuleCall_0_2()); }
	ruleExprBase
	{ after(grammarAccess.getExprsBaseHdAccess().getExprBaseParserRuleCall_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprsBaseHd__Group_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprsBaseHd__Group_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprsBaseHd__Group_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprsBaseHdAccess().getRightParenthesisKeyword_0_3()); }
	')'
	{ after(grammarAccess.getExprsBaseHdAccess().getRightParenthesisKeyword_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExprsBaseHd__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprsBaseHd__Group_1__0__Impl
	rule__ExprsBaseHd__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprsBaseHd__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprsBaseHdAccess().getLeftParenthesisKeyword_1_0()); }
	'('
	{ after(grammarAccess.getExprsBaseHdAccess().getLeftParenthesisKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprsBaseHd__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprsBaseHd__Group_1__1__Impl
	rule__ExprsBaseHd__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprsBaseHd__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprsBaseHdAccess().getTlKeyword_1_1()); }
	'tl'
	{ after(grammarAccess.getExprsBaseHdAccess().getTlKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprsBaseHd__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprsBaseHd__Group_1__2__Impl
	rule__ExprsBaseHd__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprsBaseHd__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprsBaseHdAccess().getExprBaseParserRuleCall_1_2()); }
	ruleExprBase
	{ after(grammarAccess.getExprsBaseHdAccess().getExprBaseParserRuleCall_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprsBaseHd__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprsBaseHd__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprsBaseHd__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprsBaseHdAccess().getRightParenthesisKeyword_1_3()); }
	')'
	{ after(grammarAccess.getExprsBaseHdAccess().getRightParenthesisKeyword_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LExpr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LExpr__Group__0__Impl
	rule__LExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LExpr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLExprAccess().getExprBaseParserRuleCall_0()); }
	ruleExprBase
	{ after(grammarAccess.getLExprAccess().getExprBaseParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LExpr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LExpr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLExprAccess().getLExprParserRuleCall_1()); }
	ruleLExpr
	{ after(grammarAccess.getLExprAccess().getLExprParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Exprs__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exprs__Group__0__Impl
	rule__Exprs__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exprs__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprsAccess().getExpresssionParserRuleCall_0()); }
	ruleExpresssion
	{ after(grammarAccess.getExprsAccess().getExpresssionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exprs__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exprs__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exprs__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprsAccess().getGroup_1()); }
	(rule__Exprs__Group_1__0)?
	{ after(grammarAccess.getExprsAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Exprs__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exprs__Group_1__0__Impl
	rule__Exprs__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exprs__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprsAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getExprsAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exprs__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exprs__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exprs__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprsAccess().getExprsParserRuleCall_1_1()); }
	ruleExprs
	{ after(grammarAccess.getExprsAccess().getExprsParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expresssion__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expresssion__Group__0__Impl
	rule__Expresssion__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expresssion__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpresssionAccess().getExprBaseParserRuleCall_0()); }
	ruleExprBase
	{ after(grammarAccess.getExpresssionAccess().getExprBaseParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expresssion__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expresssion__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expresssion__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpresssionAccess().getGroup_1()); }
	(rule__Expresssion__Group_1__0)?
	{ after(grammarAccess.getExpresssionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expresssion__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expresssion__Group_1__0__Impl
	rule__Expresssion__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expresssion__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpresssionAccess().getEqualsSignQuestionMarkKeyword_1_0()); }
	'=?'
	{ after(grammarAccess.getExpresssionAccess().getEqualsSignQuestionMarkKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expresssion__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expresssion__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expresssion__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpresssionAccess().getExprBaseParserRuleCall_1_1()); }
	ruleExprBase
	{ after(grammarAccess.getExpresssionAccess().getExprBaseParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Vars__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Vars__Group_0__0__Impl
	rule__Vars__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Vars__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarsAccess().getVariableTerminalRuleCall_0_0()); }
	RULE_VARIABLE
	{ after(grammarAccess.getVarsAccess().getVariableTerminalRuleCall_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vars__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Vars__Group_0__1__Impl
	rule__Vars__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Vars__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarsAccess().getCommaKeyword_0_1()); }
	','
	{ after(grammarAccess.getVarsAccess().getCommaKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vars__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Vars__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Vars__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarsAccess().getVarsParserRuleCall_0_2()); }
	ruleVars
	{ after(grammarAccess.getVarsAccess().getVarsParserRuleCall_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Program__FunctionsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getFunctionsFunctionParserRuleCall_0()); }
		ruleFunction
		{ after(grammarAccess.getProgramAccess().getFunctionsFunctionParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

fragment RULE_MAJ : 'A'..'Z';

fragment RULE_MIN : 'a'..'z';

fragment RULE_DEC : '0'..'9';

RULE_VARIABLE : RULE_MAJ (RULE_MAJ|RULE_MIN|RULE_DEC)* ('?'|'!');

RULE_SYMBOL : RULE_MIN (RULE_MAJ|RULE_MIN|RULE_DEC)* ('?'|'!');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
