/*
 * generated by Xtext 2.24.0
 */
package bdroussi.nkouadio.tl.tp2.ide.contentassist.antlr;

import bdroussi.nkouadio.tl.tp2.ide.contentassist.antlr.internal.InternalWLParser;
import bdroussi.nkouadio.tl.tp2.services.WLGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class WLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(WLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, WLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getInputAccess().getAlternatives(), "rule__Input__Alternatives");
			builder.put(grammarAccess.getOutputAccess().getAlternatives(), "rule__Output__Alternatives");
			builder.put(grammarAccess.getCommandAccess().getAlternatives(), "rule__Command__Alternatives");
			builder.put(grammarAccess.getCommandForAccess().getAlternatives(), "rule__CommandFor__Alternatives");
			builder.put(grammarAccess.getExprBaseAccess().getAlternatives(), "rule__ExprBase__Alternatives");
			builder.put(grammarAccess.getExprBaseConsAccess().getAlternatives(), "rule__ExprBaseCons__Alternatives");
			builder.put(grammarAccess.getExprsBaseHdAccess().getAlternatives(), "rule__ExprsBaseHd__Alternatives");
			builder.put(grammarAccess.getVarsAccess().getAlternatives(), "rule__Vars__Alternatives");
			builder.put(grammarAccess.getFunctionAccess().getGroup(), "rule__Function__Group__0");
			builder.put(grammarAccess.getDefinitionAccess().getGroup(), "rule__Definition__Group__0");
			builder.put(grammarAccess.getInputAccess().getGroup_0(), "rule__Input__Group_0__0");
			builder.put(grammarAccess.getOutputAccess().getGroup_0(), "rule__Output__Group_0__0");
			builder.put(grammarAccess.getCommandsAccess().getGroup(), "rule__Commands__Group__0");
			builder.put(grammarAccess.getCommandsAccess().getGroup_1(), "rule__Commands__Group_1__0");
			builder.put(grammarAccess.getCommandAccess().getGroup_1(), "rule__Command__Group_1__0");
			builder.put(grammarAccess.getCommandIfAccess().getGroup(), "rule__CommandIf__Group__0");
			builder.put(grammarAccess.getCommandIfAccess().getGroup_4(), "rule__CommandIf__Group_4__0");
			builder.put(grammarAccess.getCommandForAccess().getGroup_0(), "rule__CommandFor__Group_0__0");
			builder.put(grammarAccess.getCommandForAccess().getGroup_1(), "rule__CommandFor__Group_1__0");
			builder.put(grammarAccess.getCommandForEachAccess().getGroup(), "rule__CommandForEach__Group__0");
			builder.put(grammarAccess.getExprBaseAccess().getGroup_3(), "rule__ExprBase__Group_3__0");
			builder.put(grammarAccess.getExprBaseConsAccess().getGroup_0(), "rule__ExprBaseCons__Group_0__0");
			builder.put(grammarAccess.getExprBaseConsAccess().getGroup_1(), "rule__ExprBaseCons__Group_1__0");
			builder.put(grammarAccess.getExprsBaseHdAccess().getGroup_0(), "rule__ExprsBaseHd__Group_0__0");
			builder.put(grammarAccess.getExprsBaseHdAccess().getGroup_1(), "rule__ExprsBaseHd__Group_1__0");
			builder.put(grammarAccess.getLExprAccess().getGroup(), "rule__LExpr__Group__0");
			builder.put(grammarAccess.getExprsAccess().getGroup(), "rule__Exprs__Group__0");
			builder.put(grammarAccess.getExprsAccess().getGroup_1(), "rule__Exprs__Group_1__0");
			builder.put(grammarAccess.getExpresssionAccess().getGroup(), "rule__Expresssion__Group__0");
			builder.put(grammarAccess.getExpresssionAccess().getGroup_1(), "rule__Expresssion__Group_1__0");
			builder.put(grammarAccess.getVarsAccess().getGroup_0(), "rule__Vars__Group_0__0");
			builder.put(grammarAccess.getProgramAccess().getFunctionsAssignment(), "rule__Program__FunctionsAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private WLGrammarAccess grammarAccess;

	@Override
	protected InternalWLParser createParser() {
		InternalWLParser result = new InternalWLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public WLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(WLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
