/*
 * generated by Xtext 2.24.0
 */
package bdroussi.nkouadio.tl.tp2.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class WLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bdroussi.nkouadio.tl.tp2.WL.Program");
		private final Assignment cFunctionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFunctionsFunctionParserRuleCall_0 = (RuleCall)cFunctionsAssignment.eContents().get(0);
		
		//Program:
		//	functions+=Function+;
		@Override public ParserRule getRule() { return rule; }
		
		//functions+=Function+
		public Assignment getFunctionsAssignment() { return cFunctionsAssignment; }
		
		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_0() { return cFunctionsFunctionParserRuleCall_0; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bdroussi.nkouadio.tl.tp2.WL.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSymbolTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cDefinitionParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Function:
		//	'function' Symbol ':' Definition;
		@Override public ParserRule getRule() { return rule; }
		
		//'function' Symbol ':' Definition
		public Group getGroup() { return cGroup; }
		
		//'function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//Symbol
		public RuleCall getSymbolTerminalRuleCall_1() { return cSymbolTerminalRuleCall_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//Definition
		public RuleCall getDefinitionParserRuleCall_3() { return cDefinitionParserRuleCall_3; }
	}
	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bdroussi.nkouadio.tl.tp2.WL.Definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cInputParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cPercentSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cCommandsParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cPercentSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cWriteKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cOutputParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//Definition:
		//	'read' Input '%' Commands '%' 'write' Output;
		@Override public ParserRule getRule() { return rule; }
		
		//'read' Input '%' Commands '%' 'write' Output
		public Group getGroup() { return cGroup; }
		
		//'read'
		public Keyword getReadKeyword_0() { return cReadKeyword_0; }
		
		//Input
		public RuleCall getInputParserRuleCall_1() { return cInputParserRuleCall_1; }
		
		//'%'
		public Keyword getPercentSignKeyword_2() { return cPercentSignKeyword_2; }
		
		//Commands
		public RuleCall getCommandsParserRuleCall_3() { return cCommandsParserRuleCall_3; }
		
		//'%'
		public Keyword getPercentSignKeyword_4() { return cPercentSignKeyword_4; }
		
		//'write'
		public Keyword getWriteKeyword_5() { return cWriteKeyword_5; }
		
		//Output
		public RuleCall getOutputParserRuleCall_6() { return cOutputParserRuleCall_6; }
	}
	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bdroussi.nkouadio.tl.tp2.WL.Input");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cVariableTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cCommaKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cInputParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cVariableTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Input:
		//	Variable ',' Input | Variable;
		@Override public ParserRule getRule() { return rule; }
		
		//Variable ',' Input | Variable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Variable ',' Input
		public Group getGroup_0() { return cGroup_0; }
		
		//Variable
		public RuleCall getVariableTerminalRuleCall_0_0() { return cVariableTerminalRuleCall_0_0; }
		
		//','
		public Keyword getCommaKeyword_0_1() { return cCommaKeyword_0_1; }
		
		//Input
		public RuleCall getInputParserRuleCall_0_2() { return cInputParserRuleCall_0_2; }
		
		//Variable
		public RuleCall getVariableTerminalRuleCall_1() { return cVariableTerminalRuleCall_1; }
	}
	public class OutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bdroussi.nkouadio.tl.tp2.WL.Output");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cVariableTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cCommaKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cOutputParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cVariableTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Output:
		//	Variable ',' Output | Variable;
		@Override public ParserRule getRule() { return rule; }
		
		//Variable ',' Output | Variable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Variable ',' Output
		public Group getGroup_0() { return cGroup_0; }
		
		//Variable
		public RuleCall getVariableTerminalRuleCall_0_0() { return cVariableTerminalRuleCall_0_0; }
		
		//','
		public Keyword getCommaKeyword_0_1() { return cCommaKeyword_0_1; }
		
		//Output
		public RuleCall getOutputParserRuleCall_0_2() { return cOutputParserRuleCall_0_2; }
		
		//Variable
		public RuleCall getVariableTerminalRuleCall_1() { return cVariableTerminalRuleCall_1; }
	}
	public class CommandsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bdroussi.nkouadio.tl.tp2.WL.Commands");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCommandParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cCommandsParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Commands:
		//	Command (';' Commands)?;
		@Override public ParserRule getRule() { return rule; }
		
		//Command (';' Commands)?
		public Group getGroup() { return cGroup; }
		
		//Command
		public RuleCall getCommandParserRuleCall_0() { return cCommandParserRuleCall_0; }
		
		//(';' Commands)?
		public Group getGroup_1() { return cGroup_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }
		
		//Commands
		public RuleCall getCommandsParserRuleCall_1_1() { return cCommandsParserRuleCall_1_1; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bdroussi.nkouadio.tl.tp2.WL.Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNopKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cVarsParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cExprsParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cCommandIfParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCommandForParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCommandForEachParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Command:
		//	'nop' | Vars ':=' Exprs | CommandIf | CommandFor | CommandForEach;
		@Override public ParserRule getRule() { return rule; }
		
		//'nop' | Vars ':=' Exprs | CommandIf | CommandFor | CommandForEach
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'nop'
		public Keyword getNopKeyword_0() { return cNopKeyword_0; }
		
		//Vars ':=' Exprs
		public Group getGroup_1() { return cGroup_1; }
		
		//Vars
		public RuleCall getVarsParserRuleCall_1_0() { return cVarsParserRuleCall_1_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1_1() { return cColonEqualsSignKeyword_1_1; }
		
		//Exprs
		public RuleCall getExprsParserRuleCall_1_2() { return cExprsParserRuleCall_1_2; }
		
		//CommandIf
		public RuleCall getCommandIfParserRuleCall_2() { return cCommandIfParserRuleCall_2; }
		
		//CommandFor
		public RuleCall getCommandForParserRuleCall_3() { return cCommandForParserRuleCall_3; }
		
		//CommandForEach
		public RuleCall getCommandForEachParserRuleCall_4() { return cCommandForEachParserRuleCall_4; }
	}
	public class CommandIfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bdroussi.nkouadio.tl.tp2.WL.CommandIf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpresssionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cCommandsParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cElseKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cCommandsParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Keyword cFiKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//CommandIf:
		//	'if' Expresssion 'then' Commands ('else' Commands)? 'fi';
		@Override public ParserRule getRule() { return rule; }
		
		//'if' Expresssion 'then' Commands ('else' Commands)? 'fi'
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//Expresssion
		public RuleCall getExpresssionParserRuleCall_1() { return cExpresssionParserRuleCall_1; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//Commands
		public RuleCall getCommandsParserRuleCall_3() { return cCommandsParserRuleCall_3; }
		
		//('else' Commands)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'else'
		public Keyword getElseKeyword_4_0() { return cElseKeyword_4_0; }
		
		//Commands
		public RuleCall getCommandsParserRuleCall_4_1() { return cCommandsParserRuleCall_4_1; }
		
		//'fi'
		public Keyword getFiKeyword_5() { return cFiKeyword_5; }
	}
	public class CommandForElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bdroussi.nkouadio.tl.tp2.WL.CommandFor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cWhileKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpresssionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cDoKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cCommandsParserRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Keyword cOdKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cForKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExpresssionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cDoKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cCommandsParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Keyword cOdKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//CommandFor:
		//	'while' Expresssion 'do' Commands 'od' | 'for' Expresssion 'do' Commands 'od';
		@Override public ParserRule getRule() { return rule; }
		
		//'while' Expresssion 'do' Commands 'od' | 'for' Expresssion 'do' Commands 'od'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'while' Expresssion 'do' Commands 'od'
		public Group getGroup_0() { return cGroup_0; }
		
		//'while'
		public Keyword getWhileKeyword_0_0() { return cWhileKeyword_0_0; }
		
		//Expresssion
		public RuleCall getExpresssionParserRuleCall_0_1() { return cExpresssionParserRuleCall_0_1; }
		
		//'do'
		public Keyword getDoKeyword_0_2() { return cDoKeyword_0_2; }
		
		//Commands
		public RuleCall getCommandsParserRuleCall_0_3() { return cCommandsParserRuleCall_0_3; }
		
		//'od'
		public Keyword getOdKeyword_0_4() { return cOdKeyword_0_4; }
		
		//'for' Expresssion 'do' Commands 'od'
		public Group getGroup_1() { return cGroup_1; }
		
		//'for'
		public Keyword getForKeyword_1_0() { return cForKeyword_1_0; }
		
		//Expresssion
		public RuleCall getExpresssionParserRuleCall_1_1() { return cExpresssionParserRuleCall_1_1; }
		
		//'do'
		public Keyword getDoKeyword_1_2() { return cDoKeyword_1_2; }
		
		//Commands
		public RuleCall getCommandsParserRuleCall_1_3() { return cCommandsParserRuleCall_1_3; }
		
		//'od'
		public Keyword getOdKeyword_1_4() { return cOdKeyword_1_4; }
	}
	public class CommandForEachElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bdroussi.nkouadio.tl.tp2.WL.CommandForEach");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForeachKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cVariableTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cExpresssionParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cDoKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cCommandsParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cOdKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//CommandForEach:
		//	'foreach' Variable 'in' Expresssion 'do' Commands 'od';
		@Override public ParserRule getRule() { return rule; }
		
		//'foreach' Variable 'in' Expresssion 'do' Commands 'od'
		public Group getGroup() { return cGroup; }
		
		//'foreach'
		public Keyword getForeachKeyword_0() { return cForeachKeyword_0; }
		
		//Variable
		public RuleCall getVariableTerminalRuleCall_1() { return cVariableTerminalRuleCall_1; }
		
		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//Expresssion
		public RuleCall getExpresssionParserRuleCall_3() { return cExpresssionParserRuleCall_3; }
		
		//'do'
		public Keyword getDoKeyword_4() { return cDoKeyword_4; }
		
		//Commands
		public RuleCall getCommandsParserRuleCall_5() { return cCommandsParserRuleCall_5; }
		
		//'od'
		public Keyword getOdKeyword_6() { return cOdKeyword_6; }
	}
	public class ExprBaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bdroussi.nkouadio.tl.tp2.WL.ExprBase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNilKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final RuleCall cVariableTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSymbolTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cSymbolTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final RuleCall cLExprParserRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final RuleCall cExprBaseConsParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cExprsBaseHdParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//ExprBase:
		//	'nil' | Variable | Symbol | '(' Symbol LExpr ')' | ExprBaseCons | ExprsBaseHd;
		@Override public ParserRule getRule() { return rule; }
		
		//'nil' | Variable | Symbol | '(' Symbol LExpr ')' | ExprBaseCons | ExprsBaseHd
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'nil'
		public Keyword getNilKeyword_0() { return cNilKeyword_0; }
		
		//Variable
		public RuleCall getVariableTerminalRuleCall_1() { return cVariableTerminalRuleCall_1; }
		
		//Symbol
		public RuleCall getSymbolTerminalRuleCall_2() { return cSymbolTerminalRuleCall_2; }
		
		//'(' Symbol LExpr ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//Symbol
		public RuleCall getSymbolTerminalRuleCall_3_1() { return cSymbolTerminalRuleCall_3_1; }
		
		//LExpr
		public RuleCall getLExprParserRuleCall_3_2() { return cLExprParserRuleCall_3_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
		
		//ExprBaseCons
		public RuleCall getExprBaseConsParserRuleCall_4() { return cExprBaseConsParserRuleCall_4; }
		
		//ExprsBaseHd
		public RuleCall getExprsBaseHdParserRuleCall_5() { return cExprsBaseHdParserRuleCall_5; }
	}
	public class ExprBaseConsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bdroussi.nkouadio.tl.tp2.WL.ExprBaseCons");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cConsKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cLExprParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cListKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cLExprParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//ExprBaseCons:
		//	'(' 'cons' LExpr ')' | '(' 'list' LExpr ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' 'cons' LExpr ')' | '(' 'list' LExpr ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' 'cons' LExpr ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//'cons'
		public Keyword getConsKeyword_0_1() { return cConsKeyword_0_1; }
		
		//LExpr
		public RuleCall getLExprParserRuleCall_0_2() { return cLExprParserRuleCall_0_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//'(' 'list' LExpr ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//'list'
		public Keyword getListKeyword_1_1() { return cListKeyword_1_1; }
		
		//LExpr
		public RuleCall getLExprParserRuleCall_1_2() { return cLExprParserRuleCall_1_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}
	public class ExprsBaseHdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bdroussi.nkouadio.tl.tp2.WL.ExprsBaseHd");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cHdKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cExprBaseParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cTlKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cExprBaseParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//ExprsBaseHd:
		//	'(' 'hd' ExprBase ')' | '(' 'tl' ExprBase ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' 'hd' ExprBase ')' | '(' 'tl' ExprBase ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' 'hd' ExprBase ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//'hd'
		public Keyword getHdKeyword_0_1() { return cHdKeyword_0_1; }
		
		//ExprBase
		public RuleCall getExprBaseParserRuleCall_0_2() { return cExprBaseParserRuleCall_0_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//'(' 'tl' ExprBase ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//'tl'
		public Keyword getTlKeyword_1_1() { return cTlKeyword_1_1; }
		
		//ExprBase
		public RuleCall getExprBaseParserRuleCall_1_2() { return cExprBaseParserRuleCall_1_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}
	public class LExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bdroussi.nkouadio.tl.tp2.WL.LExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprBaseParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cLExprParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//LExpr:
		//	(ExprBase LExpr)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(ExprBase LExpr)?
		public Group getGroup() { return cGroup; }
		
		//ExprBase
		public RuleCall getExprBaseParserRuleCall_0() { return cExprBaseParserRuleCall_0; }
		
		//LExpr
		public RuleCall getLExprParserRuleCall_1() { return cLExprParserRuleCall_1; }
	}
	public class ExprsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bdroussi.nkouadio.tl.tp2.WL.Exprs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpresssionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExprsParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Exprs:
		//	Expresssion (',' Exprs)?;
		@Override public ParserRule getRule() { return rule; }
		
		//Expresssion (',' Exprs)?
		public Group getGroup() { return cGroup; }
		
		//Expresssion
		public RuleCall getExpresssionParserRuleCall_0() { return cExpresssionParserRuleCall_0; }
		
		//(',' Exprs)?
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//Exprs
		public RuleCall getExprsParserRuleCall_1_1() { return cExprsParserRuleCall_1_1; }
	}
	public class ExpresssionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bdroussi.nkouadio.tl.tp2.WL.Expresssion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprBaseParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignQuestionMarkKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExprBaseParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Expresssion:
		//	ExprBase ('=?' ExprBase)?;
		@Override public ParserRule getRule() { return rule; }
		
		//ExprBase ('=?' ExprBase)?
		public Group getGroup() { return cGroup; }
		
		//ExprBase
		public RuleCall getExprBaseParserRuleCall_0() { return cExprBaseParserRuleCall_0; }
		
		//('=?' ExprBase)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'=?'
		public Keyword getEqualsSignQuestionMarkKeyword_1_0() { return cEqualsSignQuestionMarkKeyword_1_0; }
		
		//ExprBase
		public RuleCall getExprBaseParserRuleCall_1_1() { return cExprBaseParserRuleCall_1_1; }
	}
	public class VarsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bdroussi.nkouadio.tl.tp2.WL.Vars");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cVariableTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cCommaKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cVarsParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cVariableTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Vars:
		//	Variable ',' Vars | Variable;
		@Override public ParserRule getRule() { return rule; }
		
		//Variable ',' Vars | Variable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Variable ',' Vars
		public Group getGroup_0() { return cGroup_0; }
		
		//Variable
		public RuleCall getVariableTerminalRuleCall_0_0() { return cVariableTerminalRuleCall_0_0; }
		
		//','
		public Keyword getCommaKeyword_0_1() { return cCommaKeyword_0_1; }
		
		//Vars
		public RuleCall getVarsParserRuleCall_0_2() { return cVarsParserRuleCall_0_2; }
		
		//Variable
		public RuleCall getVariableTerminalRuleCall_1() { return cVariableTerminalRuleCall_1; }
	}
	
	
	private final ProgramElements pProgram;
	private final FunctionElements pFunction;
	private final DefinitionElements pDefinition;
	private final InputElements pInput;
	private final OutputElements pOutput;
	private final CommandsElements pCommands;
	private final CommandElements pCommand;
	private final CommandIfElements pCommandIf;
	private final CommandForElements pCommandFor;
	private final CommandForEachElements pCommandForEach;
	private final ExprBaseElements pExprBase;
	private final ExprBaseConsElements pExprBaseCons;
	private final ExprsBaseHdElements pExprsBaseHd;
	private final LExprElements pLExpr;
	private final ExprsElements pExprs;
	private final ExpresssionElements pExpresssion;
	private final VarsElements pVars;
	private final TerminalRule tMaj;
	private final TerminalRule tMin;
	private final TerminalRule tDec;
	private final TerminalRule tVariable;
	private final TerminalRule tSymbol;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public WLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pFunction = new FunctionElements();
		this.pDefinition = new DefinitionElements();
		this.pInput = new InputElements();
		this.pOutput = new OutputElements();
		this.pCommands = new CommandsElements();
		this.pCommand = new CommandElements();
		this.pCommandIf = new CommandIfElements();
		this.pCommandFor = new CommandForElements();
		this.pCommandForEach = new CommandForEachElements();
		this.pExprBase = new ExprBaseElements();
		this.pExprBaseCons = new ExprBaseConsElements();
		this.pExprsBaseHd = new ExprsBaseHdElements();
		this.pLExpr = new LExprElements();
		this.pExprs = new ExprsElements();
		this.pExpresssion = new ExpresssionElements();
		this.pVars = new VarsElements();
		this.tMaj = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "bdroussi.nkouadio.tl.tp2.WL.Maj");
		this.tMin = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "bdroussi.nkouadio.tl.tp2.WL.Min");
		this.tDec = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "bdroussi.nkouadio.tl.tp2.WL.Dec");
		this.tVariable = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "bdroussi.nkouadio.tl.tp2.WL.Variable");
		this.tSymbol = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "bdroussi.nkouadio.tl.tp2.WL.Symbol");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("bdroussi.nkouadio.tl.tp2.WL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	functions+=Function+;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Function:
	//	'function' Symbol ':' Definition;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//Definition:
	//	'read' Input '%' Commands '%' 'write' Output;
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}
	
	//Input:
	//	Variable ',' Input | Variable;
	public InputElements getInputAccess() {
		return pInput;
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}
	
	//Output:
	//	Variable ',' Output | Variable;
	public OutputElements getOutputAccess() {
		return pOutput;
	}
	
	public ParserRule getOutputRule() {
		return getOutputAccess().getRule();
	}
	
	//Commands:
	//	Command (';' Commands)?;
	public CommandsElements getCommandsAccess() {
		return pCommands;
	}
	
	public ParserRule getCommandsRule() {
		return getCommandsAccess().getRule();
	}
	
	//Command:
	//	'nop' | Vars ':=' Exprs | CommandIf | CommandFor | CommandForEach;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//CommandIf:
	//	'if' Expresssion 'then' Commands ('else' Commands)? 'fi';
	public CommandIfElements getCommandIfAccess() {
		return pCommandIf;
	}
	
	public ParserRule getCommandIfRule() {
		return getCommandIfAccess().getRule();
	}
	
	//CommandFor:
	//	'while' Expresssion 'do' Commands 'od' | 'for' Expresssion 'do' Commands 'od';
	public CommandForElements getCommandForAccess() {
		return pCommandFor;
	}
	
	public ParserRule getCommandForRule() {
		return getCommandForAccess().getRule();
	}
	
	//CommandForEach:
	//	'foreach' Variable 'in' Expresssion 'do' Commands 'od';
	public CommandForEachElements getCommandForEachAccess() {
		return pCommandForEach;
	}
	
	public ParserRule getCommandForEachRule() {
		return getCommandForEachAccess().getRule();
	}
	
	//ExprBase:
	//	'nil' | Variable | Symbol | '(' Symbol LExpr ')' | ExprBaseCons | ExprsBaseHd;
	public ExprBaseElements getExprBaseAccess() {
		return pExprBase;
	}
	
	public ParserRule getExprBaseRule() {
		return getExprBaseAccess().getRule();
	}
	
	//ExprBaseCons:
	//	'(' 'cons' LExpr ')' | '(' 'list' LExpr ')';
	public ExprBaseConsElements getExprBaseConsAccess() {
		return pExprBaseCons;
	}
	
	public ParserRule getExprBaseConsRule() {
		return getExprBaseConsAccess().getRule();
	}
	
	//ExprsBaseHd:
	//	'(' 'hd' ExprBase ')' | '(' 'tl' ExprBase ')';
	public ExprsBaseHdElements getExprsBaseHdAccess() {
		return pExprsBaseHd;
	}
	
	public ParserRule getExprsBaseHdRule() {
		return getExprsBaseHdAccess().getRule();
	}
	
	//LExpr:
	//	(ExprBase LExpr)?;
	public LExprElements getLExprAccess() {
		return pLExpr;
	}
	
	public ParserRule getLExprRule() {
		return getLExprAccess().getRule();
	}
	
	//Exprs:
	//	Expresssion (',' Exprs)?;
	public ExprsElements getExprsAccess() {
		return pExprs;
	}
	
	public ParserRule getExprsRule() {
		return getExprsAccess().getRule();
	}
	
	//Expresssion:
	//	ExprBase ('=?' ExprBase)?;
	public ExpresssionElements getExpresssionAccess() {
		return pExpresssion;
	}
	
	public ParserRule getExpresssionRule() {
		return getExpresssionAccess().getRule();
	}
	
	//Vars:
	//	Variable ',' Vars | Variable;
	public VarsElements getVarsAccess() {
		return pVars;
	}
	
	public ParserRule getVarsRule() {
		return getVarsAccess().getRule();
	}
	
	//terminal Maj:
	//	'A'..'Z';
	public TerminalRule getMajRule() {
		return tMaj;
	}
	
	//terminal Min:
	//	'a'..'z';
	public TerminalRule getMinRule() {
		return tMin;
	}
	
	//terminal Dec:
	//	'0'..'9';
	public TerminalRule getDecRule() {
		return tDec;
	}
	
	//terminal Variable:
	//	Maj (Maj | Min | Dec)* ('?' | '!');
	public TerminalRule getVariableRule() {
		return tVariable;
	}
	
	//terminal Symbol:
	//	Min (Maj | Min | Dec)* ('?' | '!');
	public TerminalRule getSymbolRule() {
		return tSymbol;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
