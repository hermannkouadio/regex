/*
 * generated by Xtext 2.24.0
 */
grammar InternalWL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package bdroussi.nkouadio.tl.tp2.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package bdroussi.nkouadio.tl.tp2.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import bdroussi.nkouadio.tl.tp2.services.WLGrammarAccess;

}

@parser::members {

 	private WLGrammarAccess grammarAccess;

    public InternalWLParser(TokenStream input, WLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Program";
   	}

   	@Override
   	protected WLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getProgramAccess().getFunctionsFunctionParserRuleCall_0());
			}
			lv_functions_0_0=ruleFunction
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getProgramRule());
				}
				add(
					$current,
					"functions",
					lv_functions_0_0,
					"bdroussi.nkouadio.tl.tp2.WL.Function");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuleFunction
entryRuleFunction returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	iv_ruleFunction=ruleFunction
	{ $current=$iv_ruleFunction.current.getText(); }
	EOF;

// Rule Function
ruleFunction returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='function'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFunctionAccess().getFunctionKeyword_0());
		}
		this_Symbol_1=RULE_SYMBOL
		{
			$current.merge(this_Symbol_1);
		}
		{
			newLeafNode(this_Symbol_1, grammarAccess.getFunctionAccess().getSymbolTerminalRuleCall_1());
		}
		kw=':'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFunctionAccess().getColonKeyword_2());
		}
		{
			newCompositeNode(grammarAccess.getFunctionAccess().getDefinitionParserRuleCall_3());
		}
		this_Definition_3=ruleDefinition
		{
			$current.merge(this_Definition_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDefinition
entryRuleDefinition returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDefinitionRule()); }
	iv_ruleDefinition=ruleDefinition
	{ $current=$iv_ruleDefinition.current.getText(); }
	EOF;

// Rule Definition
ruleDefinition returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='read'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDefinitionAccess().getReadKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getDefinitionAccess().getInputParserRuleCall_1());
		}
		this_Input_1=ruleInput
		{
			$current.merge(this_Input_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw='%'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDefinitionAccess().getPercentSignKeyword_2());
		}
		{
			newCompositeNode(grammarAccess.getDefinitionAccess().getCommandsParserRuleCall_3());
		}
		this_Commands_3=ruleCommands
		{
			$current.merge(this_Commands_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw='%'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDefinitionAccess().getPercentSignKeyword_4());
		}
		kw='write'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDefinitionAccess().getWriteKeyword_5());
		}
		{
			newCompositeNode(grammarAccess.getDefinitionAccess().getOutputParserRuleCall_6());
		}
		this_Output_6=ruleOutput
		{
			$current.merge(this_Output_6);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleInput
entryRuleInput returns [String current=null]:
	{ newCompositeNode(grammarAccess.getInputRule()); }
	iv_ruleInput=ruleInput
	{ $current=$iv_ruleInput.current.getText(); }
	EOF;

// Rule Input
ruleInput returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_Variable_0=RULE_VARIABLE
			{
				$current.merge(this_Variable_0);
			}
			{
				newLeafNode(this_Variable_0, grammarAccess.getInputAccess().getVariableTerminalRuleCall_0_0());
			}
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getInputAccess().getCommaKeyword_0_1());
			}
			{
				newCompositeNode(grammarAccess.getInputAccess().getInputParserRuleCall_0_2());
			}
			this_Input_2=ruleInput
			{
				$current.merge(this_Input_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		this_Variable_3=RULE_VARIABLE
		{
			$current.merge(this_Variable_3);
		}
		{
			newLeafNode(this_Variable_3, grammarAccess.getInputAccess().getVariableTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleOutput
entryRuleOutput returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOutputRule()); }
	iv_ruleOutput=ruleOutput
	{ $current=$iv_ruleOutput.current.getText(); }
	EOF;

// Rule Output
ruleOutput returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_Variable_0=RULE_VARIABLE
			{
				$current.merge(this_Variable_0);
			}
			{
				newLeafNode(this_Variable_0, grammarAccess.getOutputAccess().getVariableTerminalRuleCall_0_0());
			}
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getOutputAccess().getCommaKeyword_0_1());
			}
			{
				newCompositeNode(grammarAccess.getOutputAccess().getOutputParserRuleCall_0_2());
			}
			this_Output_2=ruleOutput
			{
				$current.merge(this_Output_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		this_Variable_3=RULE_VARIABLE
		{
			$current.merge(this_Variable_3);
		}
		{
			newLeafNode(this_Variable_3, grammarAccess.getOutputAccess().getVariableTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleCommands
entryRuleCommands returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCommandsRule()); }
	iv_ruleCommands=ruleCommands
	{ $current=$iv_ruleCommands.current.getText(); }
	EOF;

// Rule Commands
ruleCommands returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCommandsAccess().getCommandParserRuleCall_0());
		}
		this_Command_0=ruleCommand
		{
			$current.merge(this_Command_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw=';'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCommandsAccess().getSemicolonKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getCommandsAccess().getCommandsParserRuleCall_1_1());
			}
			this_Commands_2=ruleCommands
			{
				$current.merge(this_Commands_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRuleCommand
entryRuleCommand returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCommandRule()); }
	iv_ruleCommand=ruleCommand
	{ $current=$iv_ruleCommand.current.getText(); }
	EOF;

// Rule Command
ruleCommand returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='nop'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCommandAccess().getNopKeyword_0());
		}
		    |
		(
			{
				newCompositeNode(grammarAccess.getCommandAccess().getVarsParserRuleCall_1_0());
			}
			this_Vars_1=ruleVars
			{
				$current.merge(this_Vars_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=':='
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCommandAccess().getColonEqualsSignKeyword_1_1());
			}
			{
				newCompositeNode(grammarAccess.getCommandAccess().getExprsParserRuleCall_1_2());
			}
			this_Exprs_3=ruleExprs
			{
				$current.merge(this_Exprs_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getCommandIfParserRuleCall_2());
		}
		this_CommandIf_4=ruleCommandIf
		{
			$current.merge(this_CommandIf_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getCommandForParserRuleCall_3());
		}
		this_CommandFor_5=ruleCommandFor
		{
			$current.merge(this_CommandFor_5);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getCommandForEachParserRuleCall_4());
		}
		this_CommandForEach_6=ruleCommandForEach
		{
			$current.merge(this_CommandForEach_6);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCommandIf
entryRuleCommandIf returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCommandIfRule()); }
	iv_ruleCommandIf=ruleCommandIf
	{ $current=$iv_ruleCommandIf.current.getText(); }
	EOF;

// Rule CommandIf
ruleCommandIf returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='if'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCommandIfAccess().getIfKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getCommandIfAccess().getExpresssionParserRuleCall_1());
		}
		this_Expresssion_1=ruleExpresssion
		{
			$current.merge(this_Expresssion_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw='then'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCommandIfAccess().getThenKeyword_2());
		}
		{
			newCompositeNode(grammarAccess.getCommandIfAccess().getCommandsParserRuleCall_3());
		}
		this_Commands_3=ruleCommands
		{
			$current.merge(this_Commands_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw='else'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCommandIfAccess().getElseKeyword_4_0());
			}
			{
				newCompositeNode(grammarAccess.getCommandIfAccess().getCommandsParserRuleCall_4_1());
			}
			this_Commands_5=ruleCommands
			{
				$current.merge(this_Commands_5);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
		kw='fi'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCommandIfAccess().getFiKeyword_5());
		}
	)
;

// Entry rule entryRuleCommandFor
entryRuleCommandFor returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCommandForRule()); }
	iv_ruleCommandFor=ruleCommandFor
	{ $current=$iv_ruleCommandFor.current.getText(); }
	EOF;

// Rule CommandFor
ruleCommandFor returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='while'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCommandForAccess().getWhileKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getCommandForAccess().getExpresssionParserRuleCall_0_1());
			}
			this_Expresssion_1=ruleExpresssion
			{
				$current.merge(this_Expresssion_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw='do'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCommandForAccess().getDoKeyword_0_2());
			}
			{
				newCompositeNode(grammarAccess.getCommandForAccess().getCommandsParserRuleCall_0_3());
			}
			this_Commands_3=ruleCommands
			{
				$current.merge(this_Commands_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw='od'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCommandForAccess().getOdKeyword_0_4());
			}
		)
		    |
		(
			kw='for'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCommandForAccess().getForKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getCommandForAccess().getExpresssionParserRuleCall_1_1());
			}
			this_Expresssion_6=ruleExpresssion
			{
				$current.merge(this_Expresssion_6);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw='do'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCommandForAccess().getDoKeyword_1_2());
			}
			{
				newCompositeNode(grammarAccess.getCommandForAccess().getCommandsParserRuleCall_1_3());
			}
			this_Commands_8=ruleCommands
			{
				$current.merge(this_Commands_8);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw='od'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCommandForAccess().getOdKeyword_1_4());
			}
		)
	)
;

// Entry rule entryRuleCommandForEach
entryRuleCommandForEach returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCommandForEachRule()); }
	iv_ruleCommandForEach=ruleCommandForEach
	{ $current=$iv_ruleCommandForEach.current.getText(); }
	EOF;

// Rule CommandForEach
ruleCommandForEach returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='foreach'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCommandForEachAccess().getForeachKeyword_0());
		}
		this_Variable_1=RULE_VARIABLE
		{
			$current.merge(this_Variable_1);
		}
		{
			newLeafNode(this_Variable_1, grammarAccess.getCommandForEachAccess().getVariableTerminalRuleCall_1());
		}
		kw='in'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCommandForEachAccess().getInKeyword_2());
		}
		{
			newCompositeNode(grammarAccess.getCommandForEachAccess().getExpresssionParserRuleCall_3());
		}
		this_Expresssion_3=ruleExpresssion
		{
			$current.merge(this_Expresssion_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw='do'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCommandForEachAccess().getDoKeyword_4());
		}
		{
			newCompositeNode(grammarAccess.getCommandForEachAccess().getCommandsParserRuleCall_5());
		}
		this_Commands_5=ruleCommands
		{
			$current.merge(this_Commands_5);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw='od'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCommandForEachAccess().getOdKeyword_6());
		}
	)
;

// Entry rule entryRuleExprBase
entryRuleExprBase returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExprBaseRule()); }
	iv_ruleExprBase=ruleExprBase
	{ $current=$iv_ruleExprBase.current.getText(); }
	EOF;

// Rule ExprBase
ruleExprBase returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='nil'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getExprBaseAccess().getNilKeyword_0());
		}
		    |
		this_Variable_1=RULE_VARIABLE
		{
			$current.merge(this_Variable_1);
		}
		{
			newLeafNode(this_Variable_1, grammarAccess.getExprBaseAccess().getVariableTerminalRuleCall_1());
		}
		    |
		this_Symbol_2=RULE_SYMBOL
		{
			$current.merge(this_Symbol_2);
		}
		{
			newLeafNode(this_Symbol_2, grammarAccess.getExprBaseAccess().getSymbolTerminalRuleCall_2());
		}
		    |
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprBaseAccess().getLeftParenthesisKeyword_3_0());
			}
			this_Symbol_4=RULE_SYMBOL
			{
				$current.merge(this_Symbol_4);
			}
			{
				newLeafNode(this_Symbol_4, grammarAccess.getExprBaseAccess().getSymbolTerminalRuleCall_3_1());
			}
			{
				newCompositeNode(grammarAccess.getExprBaseAccess().getLExprParserRuleCall_3_2());
			}
			this_LExpr_5=ruleLExpr
			{
				$current.merge(this_LExpr_5);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprBaseAccess().getRightParenthesisKeyword_3_3());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getExprBaseAccess().getExprBaseConsParserRuleCall_4());
		}
		this_ExprBaseCons_7=ruleExprBaseCons
		{
			$current.merge(this_ExprBaseCons_7);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExprBaseAccess().getExprsBaseHdParserRuleCall_5());
		}
		this_ExprsBaseHd_8=ruleExprsBaseHd
		{
			$current.merge(this_ExprsBaseHd_8);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExprBaseCons
entryRuleExprBaseCons returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExprBaseConsRule()); }
	iv_ruleExprBaseCons=ruleExprBaseCons
	{ $current=$iv_ruleExprBaseCons.current.getText(); }
	EOF;

// Rule ExprBaseCons
ruleExprBaseCons returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprBaseConsAccess().getLeftParenthesisKeyword_0_0());
			}
			kw='cons'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprBaseConsAccess().getConsKeyword_0_1());
			}
			{
				newCompositeNode(grammarAccess.getExprBaseConsAccess().getLExprParserRuleCall_0_2());
			}
			this_LExpr_2=ruleLExpr
			{
				$current.merge(this_LExpr_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprBaseConsAccess().getRightParenthesisKeyword_0_3());
			}
		)
		    |
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprBaseConsAccess().getLeftParenthesisKeyword_1_0());
			}
			kw='list'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprBaseConsAccess().getListKeyword_1_1());
			}
			{
				newCompositeNode(grammarAccess.getExprBaseConsAccess().getLExprParserRuleCall_1_2());
			}
			this_LExpr_6=ruleLExpr
			{
				$current.merge(this_LExpr_6);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprBaseConsAccess().getRightParenthesisKeyword_1_3());
			}
		)
	)
;

// Entry rule entryRuleExprsBaseHd
entryRuleExprsBaseHd returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExprsBaseHdRule()); }
	iv_ruleExprsBaseHd=ruleExprsBaseHd
	{ $current=$iv_ruleExprsBaseHd.current.getText(); }
	EOF;

// Rule ExprsBaseHd
ruleExprsBaseHd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprsBaseHdAccess().getLeftParenthesisKeyword_0_0());
			}
			kw='hd'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprsBaseHdAccess().getHdKeyword_0_1());
			}
			{
				newCompositeNode(grammarAccess.getExprsBaseHdAccess().getExprBaseParserRuleCall_0_2());
			}
			this_ExprBase_2=ruleExprBase
			{
				$current.merge(this_ExprBase_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprsBaseHdAccess().getRightParenthesisKeyword_0_3());
			}
		)
		    |
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprsBaseHdAccess().getLeftParenthesisKeyword_1_0());
			}
			kw='tl'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprsBaseHdAccess().getTlKeyword_1_1());
			}
			{
				newCompositeNode(grammarAccess.getExprsBaseHdAccess().getExprBaseParserRuleCall_1_2());
			}
			this_ExprBase_6=ruleExprBase
			{
				$current.merge(this_ExprBase_6);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprsBaseHdAccess().getRightParenthesisKeyword_1_3());
			}
		)
	)
;

// Entry rule entryRuleLExpr
entryRuleLExpr returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLExprRule()); }
	iv_ruleLExpr=ruleLExpr
	{ $current=$iv_ruleLExpr.current.getText(); }
	EOF;

// Rule LExpr
ruleLExpr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLExprAccess().getExprBaseParserRuleCall_0());
		}
		this_ExprBase_0=ruleExprBase
		{
			$current.merge(this_ExprBase_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getLExprAccess().getLExprParserRuleCall_1());
		}
		this_LExpr_1=ruleLExpr
		{
			$current.merge(this_LExpr_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)?
;

// Entry rule entryRuleExprs
entryRuleExprs returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExprsRule()); }
	iv_ruleExprs=ruleExprs
	{ $current=$iv_ruleExprs.current.getText(); }
	EOF;

// Rule Exprs
ruleExprs returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExprsAccess().getExpresssionParserRuleCall_0());
		}
		this_Expresssion_0=ruleExpresssion
		{
			$current.merge(this_Expresssion_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprsAccess().getCommaKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getExprsAccess().getExprsParserRuleCall_1_1());
			}
			this_Exprs_2=ruleExprs
			{
				$current.merge(this_Exprs_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRuleExpresssion
entryRuleExpresssion returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExpresssionRule()); }
	iv_ruleExpresssion=ruleExpresssion
	{ $current=$iv_ruleExpresssion.current.getText(); }
	EOF;

// Rule Expresssion
ruleExpresssion returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpresssionAccess().getExprBaseParserRuleCall_0());
		}
		this_ExprBase_0=ruleExprBase
		{
			$current.merge(this_ExprBase_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw='=?'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExpresssionAccess().getEqualsSignQuestionMarkKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getExpresssionAccess().getExprBaseParserRuleCall_1_1());
			}
			this_ExprBase_2=ruleExprBase
			{
				$current.merge(this_ExprBase_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRuleVars
entryRuleVars returns [String current=null]:
	{ newCompositeNode(grammarAccess.getVarsRule()); }
	iv_ruleVars=ruleVars
	{ $current=$iv_ruleVars.current.getText(); }
	EOF;

// Rule Vars
ruleVars returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_Variable_0=RULE_VARIABLE
			{
				$current.merge(this_Variable_0);
			}
			{
				newLeafNode(this_Variable_0, grammarAccess.getVarsAccess().getVariableTerminalRuleCall_0_0());
			}
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getVarsAccess().getCommaKeyword_0_1());
			}
			{
				newCompositeNode(grammarAccess.getVarsAccess().getVarsParserRuleCall_0_2());
			}
			this_Vars_2=ruleVars
			{
				$current.merge(this_Vars_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		this_Variable_3=RULE_VARIABLE
		{
			$current.merge(this_Variable_3);
		}
		{
			newLeafNode(this_Variable_3, grammarAccess.getVarsAccess().getVariableTerminalRuleCall_1());
		}
	)
;

fragment RULE_MAJ : 'A'..'Z';

fragment RULE_MIN : 'a'..'z';

fragment RULE_DEC : '0'..'9';

RULE_VARIABLE : RULE_MAJ (RULE_MAJ|RULE_MIN|RULE_DEC)* ('?'|'!');

RULE_SYMBOL : RULE_MIN (RULE_MAJ|RULE_MIN|RULE_DEC)* ('?'|'!');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
